from fastapi.testclient import TestClient
import pytest
import base64
import os

from app.main import app

@pytest.fixture
def test_client():
    """Create a test client for the API."""
    return TestClient(app)

@pytest.fixture
def auth_headers():
    """Create authentication headers for API requests."""
    # This would use environment variables in a real test
    username = "admin"
    password = "password"
    
    credentials = f"{username}:{password}"
    encoded_credentials = base64.b64encode(credentials.encode()).decode()
    
    return {"Authorization": f"Basic {encoded_credentials}"}

def test_health_endpoint(test_client):
    """Test the health check endpoint."""
    response = test_client.get("/v1/health")
    assert response.status_code == 200
    assert response.json()["status"] == "ok"

def test_token_count_endpoint(test_client, auth_headers):
    """Test the token counting endpoint."""
    payload = {
        "text": "Hello world!",
        "model": "gpt-3.5-turbo",
        "text_id": "test-123"
    }
    
    response = test_client.post("/v1/tokens/count", json=payload, headers=auth_headers)
    
    assert response.status_code == 200
    data = response.json()
    assert data["token_count"] == 3
    assert data["model"] == "gpt-3.5-turbo"
    assert data["text_id"] == "test-123"
    assert "processing_time_ms" in data

def test_batch_token_count_endpoint(test_client, auth_headers):
    """Test the batch token counting endpoint."""
    payload = {
        "texts": [
            {"text": "Hello world!", "text_id": "text1"},
            {"text": "This is another example.", "text_id": "text2"}
        ],
        "model": "gpt-3.5-turbo"
    }
    
    response = test_client.post("/v1/tokens/batch-count", json=payload, headers=auth_headers)
    
    assert response.status_code == 200
    data = response.json()
    assert len(data["results"]) == 2
    assert data["results"][0]["text_id"] == "text1"
    assert data["results"][0]["token_count"] == 3
    assert data["results"][1]["text_id"] == "text2"

def test_authentication(test_client):
    """Test that authentication is required."""
    payload = {"text": "Hello world!"}
    
    response = test_client.post("/v1/tokens/count", json=payload)
    
    # Should be unauthorized without credentials
    assert response.status_code == 401

# Generated by Copilot

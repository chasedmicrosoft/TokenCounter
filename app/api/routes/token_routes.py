from fastapi import APIRouter, Depends, HTTPException, Request
from typing import List

from app.api.models.token_models import (
    TokenCountRequest,
    TokenCountResponse,
    BatchTokenCountRequest,
    BatchTokenCountResponse,
    HealthResponse
)
from app.services.token_counter import token_counter
from app.core.security import verify_credentials, limiter

router = APIRouter()

@router.get("/health", response_model=HealthResponse, tags=["health"])
async def health_check():
    """Health check endpoint."""
    return {"status": "ok", "version": "1.0.0"}

@router.post("/tokens/count", response_model=TokenCountResponse, tags=["tokens"])
@limiter.limit("100/minute")
async def count_tokens(
    request: Request,  # Add the Request parameter for the limiter
    token_request: TokenCountRequest, 
    username: str = Depends(verify_credentials)
):
    """
    Count tokens in the provided text.
    
    Returns the number of tokens and metadata about the processing.
    """
    try:
        result = token_counter.count_tokens(token_request.text, token_request.model)
        
        # Add text_id if it was provided
        if token_request.text_id:
            result["text_id"] = token_request.text_id
            
        return result
    except Exception as e:
        raise HTTPException(
            status_code=500,
            detail=f"Error counting tokens: {str(e)}"
        )

@router.post("/tokens/batch-count", response_model=BatchTokenCountResponse, tags=["tokens"])
@limiter.limit("20/minute")
async def batch_count_tokens(
    request: Request,  # Add the Request parameter for the limiter
    batch_request: BatchTokenCountRequest,
    username: str = Depends(verify_credentials)
):
    """
    Count tokens for multiple text inputs.
    
    Returns token counts and metadata for each text.
    """
    try:
        # Convert the request format to what our service expects
        texts = []
        for item in batch_request.texts:
            text_entry = {
                "text": item.text
            }
            if item.text_id:
                text_entry["text_id"] = item.text_id
            texts.append(text_entry)
                
        results = token_counter.batch_count_tokens(texts, batch_request.model)
        return {"results": results}
    except Exception as e:
        raise HTTPException(
            status_code=500,
            detail=f"Error batch counting tokens: {str(e)}"
        )

# Generated by Copilot

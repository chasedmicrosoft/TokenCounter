from pydantic import BaseModel, Field
from typing import List, Optional

class TokenCountRequest(BaseModel):
    """Request model for token counting."""
    text: str = Field(..., description="The text to count tokens in")
    model: Optional[str] = Field(None, description="The model to use for tokenization")
    text_id: Optional[str] = Field(None, description="Optional client reference ID")

class TokenCountResponse(BaseModel):
    """Response model for token counting."""
    token_count: int = Field(..., description="Number of tokens in the text")
    model: str = Field(..., description="Model used for tokenization")
    processing_time_ms: int = Field(..., description="Processing time in milliseconds")
    text_id: Optional[str] = Field(None, description="Client reference ID if provided")

class BatchTokenCountRequest(BaseModel):
    """Request model for batch token counting."""
    texts: List[TokenCountRequest] = Field(..., description="List of texts to count tokens for")
    model: Optional[str] = Field(None, description="Default model to use for all texts")

class BatchTokenCountResponse(BaseModel):
    """Response model for batch token counting."""
    results: List[TokenCountResponse] = Field(..., description="Token counts for each text")

class HealthResponse(BaseModel):
    """Response model for health check."""
    status: str = Field("ok", description="Service status")
    version: str = Field("1.0.0", description="API version")

# Generated by Copilot
